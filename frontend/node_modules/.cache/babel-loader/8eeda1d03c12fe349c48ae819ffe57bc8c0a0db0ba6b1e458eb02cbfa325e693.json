{"ast":null,"code":"/**\r\n * API Service for AURA Voice AI\r\n * Handles all backend communication\r\n */import axios from'axios';// Create axios instance with default config\nconst api=axios.create({baseURL:import.meta.env.VITE_API_URL||'http://localhost:8000',timeout:30000,headers:{'Content-Type':'application/json'}});// Request interceptor for auth\napi.interceptors.request.use(config=>{// Add auth token if available\nconst token=localStorage.getItem('admin_token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>{return Promise.reject(error);});// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Handle unauthorized access\nlocalStorage.removeItem('admin_token');window.location.href='/login';}return Promise.reject(error);});// Chat API\nexport const chatAPI={// Send chat message\nsendMessage:async function(message,userId,sessionId){let useMemory=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;const response=await api.post('/chat',{message,user_id:userId,session_id:sessionId,use_memory:useMemory,stream:false});return response.data;},// Get chat history\ngetChatHistory:async userId=>{const response=await api.get(\"/memory/conversations/\".concat(userId));return response.data;}};// Voice API\nexport const voiceAPI={// Process voice message\nprocessVoice:async(audioBlob,userId,sessionId)=>{const formData=new FormData();formData.append('audio',audioBlob,'recording.webm');if(userId)formData.append('user_id',userId);if(sessionId)formData.append('session_id',sessionId);formData.append('use_memory','true');const response=await api.post('/voice/process',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Transcribe audio\ntranscribe:async function(audioBlob){let language=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en';const formData=new FormData();formData.append('audio',audioBlob);formData.append('language',language);const response=await api.post('/voice/transcribe',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Synthesize speech\nsynthesize:async(text,voiceId)=>{const formData=new FormData();formData.append('text',text);if(voiceId)formData.append('voice_id',voiceId);const response=await api.post('/voice/synthesize',formData);return response.data;},// Get available voices\ngetVoices:async()=>{const response=await api.get('/voice/voices');return response.data;}};// Memory API\nexport const memoryAPI={// Get user preferences\ngetPreferences:async userId=>{const response=await api.get(\"/memory/preferences/\".concat(userId));return response.data;},// Update user preferences\nupdatePreferences:async(userId,preferences)=>{const response=await api.put(\"/memory/preferences/\".concat(userId),preferences);return response.data;},// Export user data (GDPR)\nexportUserData:async userId=>{const response=await api.get(\"/memory/export/\".concat(userId));return response.data;},// Delete user data (GDPR)\ndeleteUserData:async userId=>{const response=await api.delete(\"/memory/delete/\".concat(userId),{data:{user_id:userId,confirmation:true}});return response.data;}};// Admin API\nexport const adminAPI={// Login\nlogin:async(email,password)=>{const response=await api.post('/admin/login',{email,password});return response.data;},// Get stats\ngetStats:async()=>{const response=await api.get('/stats');return response.data;},// Upload knowledge file\nuploadFile:async file=>{const formData=new FormData();formData.append('file',file);const response=await api.post('/admin/upload',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Get uploaded files\ngetFiles:async()=>{const response=await api.get('/admin/files');return response.data;},// Delete file\ndeleteFile:async fileId=>{const response=await api.delete(\"/admin/files/\".concat(fileId));return response.data;}};// System API\nexport const systemAPI={// Health check\ncheckHealth:async()=>{const response=await api.get('/health');return response.data;},// Get system stats\ngetStats:async()=>{const response=await api.get('/stats');return response.data;}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","import","meta","env","VITE_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","chatAPI","sendMessage","message","userId","sessionId","useMemory","arguments","length","undefined","post","user_id","session_id","use_memory","stream","data","getChatHistory","get","voiceAPI","processVoice","audioBlob","formData","FormData","append","transcribe","language","synthesize","text","voiceId","getVoices","memoryAPI","getPreferences","updatePreferences","preferences","put","exportUserData","deleteUserData","delete","confirmation","adminAPI","login","email","password","getStats","uploadFile","file","getFiles","deleteFile","fileId","systemAPI","checkHealth"],"sources":["C:/Users/Raf/Desktop/aura/aura-voice-ai/frontend/src/services/api.ts"],"sourcesContent":["/**\r\n * API Service for AURA Voice AI\r\n * Handles all backend communication\r\n */\r\n\r\nimport axios, { AxiosInstance } from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst api: AxiosInstance = axios.create({\r\n  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:8000',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for auth\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add auth token if available\r\n    const token = localStorage.getItem('admin_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized access\r\n      localStorage.removeItem('admin_token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Chat API\r\nexport const chatAPI = {\r\n  // Send chat message\r\n  sendMessage: async (message: string, userId?: string, sessionId?: string, useMemory = true) => {\r\n    const response = await api.post('/chat', {\r\n      message,\r\n      user_id: userId,\r\n      session_id: sessionId,\r\n      use_memory: useMemory,\r\n      stream: false,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get chat history\r\n  getChatHistory: async (userId: string) => {\r\n    const response = await api.get(`/memory/conversations/${userId}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Voice API\r\nexport const voiceAPI = {\r\n  // Process voice message\r\n  processVoice: async (audioBlob: Blob, userId?: string, sessionId?: string) => {\r\n    const formData = new FormData();\r\n    formData.append('audio', audioBlob, 'recording.webm');\r\n    if (userId) formData.append('user_id', userId);\r\n    if (sessionId) formData.append('session_id', sessionId);\r\n    formData.append('use_memory', 'true');\r\n\r\n    const response = await api.post('/voice/process', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Transcribe audio\r\n  transcribe: async (audioBlob: Blob, language = 'en') => {\r\n    const formData = new FormData();\r\n    formData.append('audio', audioBlob);\r\n    formData.append('language', language);\r\n\r\n    const response = await api.post('/voice/transcribe', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Synthesize speech\r\n  synthesize: async (text: string, voiceId?: string) => {\r\n    const formData = new FormData();\r\n    formData.append('text', text);\r\n    if (voiceId) formData.append('voice_id', voiceId);\r\n\r\n    const response = await api.post('/voice/synthesize', formData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get available voices\r\n  getVoices: async () => {\r\n    const response = await api.get('/voice/voices');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Memory API\r\nexport const memoryAPI = {\r\n  // Get user preferences\r\n  getPreferences: async (userId: string) => {\r\n    const response = await api.get(`/memory/preferences/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update user preferences\r\n  updatePreferences: async (userId: string, preferences: any) => {\r\n    const response = await api.put(`/memory/preferences/${userId}`, preferences);\r\n    return response.data;\r\n  },\r\n\r\n  // Export user data (GDPR)\r\n  exportUserData: async (userId: string) => {\r\n    const response = await api.get(`/memory/export/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete user data (GDPR)\r\n  deleteUserData: async (userId: string) => {\r\n    const response = await api.delete(`/memory/delete/${userId}`, {\r\n      data: { user_id: userId, confirmation: true },\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Admin API\r\nexport const adminAPI = {\r\n  // Login\r\n  login: async (email: string, password: string) => {\r\n    const response = await api.post('/admin/login', { email, password });\r\n    return response.data;\r\n  },\r\n\r\n  // Get stats\r\n  getStats: async () => {\r\n    const response = await api.get('/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Upload knowledge file\r\n  uploadFile: async (file: File) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    const response = await api.post('/admin/upload', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get uploaded files\r\n  getFiles: async () => {\r\n    const response = await api.get('/admin/files');\r\n    return response.data;\r\n  },\r\n\r\n  // Delete file\r\n  deleteFile: async (fileId: string) => {\r\n    const response = await api.delete(`/admin/files/${fileId}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// System API\r\nexport const systemAPI = {\r\n  // Health check\r\n  checkHealth: async () => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n\r\n  // Get system stats\r\n  getStats: async () => {\r\n    const response = await api.get('/stats');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}